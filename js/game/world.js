/*

@_______________________No_Thrones_________________________@
@___________________________by_____________________________@
@_______________________Rory_Duncan________________________@
@             http://www.github.com/RoryDuncan             @
*/

/*
@class stage
@level 
@methods constructor
@params length, width, depth, color
*/

var Stage;

Stage = (function() {

  function Stage(name) {
    this.name = name;
    this.title = "World " + name;
    this.blocks = 0;
    console.log(this);
  }

  Stage.prototype.data = [];

  Stage.prototype.actors = [];

  /*
  @method Stage.makeRandomData
  */


  Stage.prototype.makeRandomData = function(height, width, maxZ) {
    var hmap, id, layer, total, visible, x, y, z, _i, _j, _k, _len, _ref;
    if (height === void 0) {
      return console.error("Arguments not specified. Stage.makeRandomData(h,w,maxZ) arguments needed.");
    }
    if (width === void 0) {
      return console.error("Arguments not specified. Stage.makeRandomData(h,w,maxZ) arguments needed.");
    }
    if (maxZ === void 0) {
      console.warn("maximum Z value not specified, defaulting to 15");
    }
    if (maxZ === void 0) {
      maxZ = 15;
    }
    this.settings = {
      rows: width,
      cols: height,
      stacks: maxZ
    };
    this.data = [];
    this.size = 0;
    x = 0;
    y = 0;
    z = 0;
    console.groupCollapsed("Creating Data");
    total = (height * width) - 1;
    this.heightMap = [];
    for (hmap = _i = 0; 0 <= total ? _i <= total : _i >= total; hmap = 0 <= total ? ++_i : --_i) {
      this.heightMap.push(1 + ~~(Math.random() * 3));
    }
    console.log(this.heightMap);
    for (layer = _j = 1; 1 <= maxZ ? _j <= maxZ : _j >= maxZ; layer = 1 <= maxZ ? ++_j : --_j) {
      x = 0;
      z = 0;
      _ref = this.heightMap;
      for (_k = 0, _len = _ref.length; _k < _len; _k++) {
        height = _ref[_k];
        if (x === width) {
          z += 1;
        }
        if (x === width) {
          x = 0;
        }
        id = ++this.size;
        visible = true;
        if (layer > height) {
          visible = false;
        }
        this.data.push({
          'id': id,
          'x': x,
          'y': layer,
          'z': z,
          'heightMap': height,
          'visible': visible
        });
        x++;
      }
    }
    console.log(this.data);
    console.groupEnd("Creating Data");
    return "done";
  };

  Stage.prototype.clear = function() {
    return this.data = [];
  };

  /*
  @method Stage.build
  */


  Stage.prototype.build = function(cubeGeometry, cubeMaterial, origin) {
    var actor, datum, position, _i, _len, _ref;
    if (this.data.length === 0) {
      return console.error("I can't build without any lumber. (psst, data is missing)");
    }
    if (origin === void 0) {
      origin = new THREE.Vector3(0, 0, 0);
    }
    console.groupCollapsed("Building...");
    _ref = this.data;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      datum = _ref[_i];
      position = new THREE.Vector3(datum.x * cubeGeometry.width, datum.y * cubeGeometry.height, datum.z * cubeGeometry.depth);
      if (datum.visible === true) {
        actor = new Cube(cubeGeometry, cubeMaterial, position);
      }
      if (datum.visible === false) {
        actor = new Cube(cubeGeometry, {
          wireframe: true
        }, position);
      }
      actor.from = datum;
      this.actors.push(actor);
    }
    console.log(this.actors);
    return console.groupEnd("Building...");
  };

  Stage.prototype.addToScene = function() {
    var eachActor, _i, _len, _ref, _results;
    if (this.actors.length === 0) {
      return console.error("Not enough actors.");
    }
    _ref = this.actors;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      eachActor = _ref[_i];
      if (eachActor.from.visible === true) {
        _results.push(eachActor.addToScene());
      } else {
        continue;
      }
    }
    return _results;
  };

  Stage.prototype.toObject = function() {
    _.object(this.data);
    return console.log(this.data);
  };

  /*
  @method Stage.get
  @description Returns the
  @paremtype object
  @param values
  */


  Stage.prototype.get = function(values) {
    var results;
    if (values === void 0 || values === null) {
      return console.error("No arguments given. to Stage.get()");
    }
    results = [];
    results = _.where(this.data, values);
    if (results.length === 0) {
      return false;
    } else {
      return results;
    }
  };

  return Stage;

})();

// Generated by CoffeeScript 1.5.0-pre
